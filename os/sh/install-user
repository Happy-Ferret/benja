#!/usr/bin/bash

##
# Copyright (c) 2016 Andrea Giammarchi
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##

# utilities
contains() {
  local s=$1
  local b=''
  local a=''
  if [ -f $s ]; then
    b=$(cat $s)
    a=$(cat $s | sed -e "s/${2}//")
  else
    b="${s}"
    a=$(echo "${s}" | sed -e "s/${2}//")
  fi
  if [ "$b" = "$a" ]; then
    echo "false"
  else
    echo "true"
  fi
}

cd ~/

touch ~/.hushlogin
mkdir -p ~/.config

# initial Weston configuration
if [ ! -f ~/.config/weston.ini ]; then
  echo ' creating ~/.config/weston.ini'
  WESTON_INI="[core]
idle-time=0"
  if [ "$OS_BOOTINTO" = "electron" ]; then
    WESTON_INI="$WESTON_INI
modules=xwayland.so"
  fi
  echo "${WESTON_INI}

[shell]
client=/home/${OS_USER}/${OS_APP_LAUNCHER}
background-image=none
panel-location=none
animation=none
close-animation=none
startup-animation=none
locking=false
" >~/.config/weston.ini
fi

# OS Bootstrap
if [ "$(contains ~/.bashrc "# ${OS_NAME} bootstrap")" = "false" ]; then
  echo ' updating ~/.bashrc'
  OS_LOGO=$(cat ${OS_NAME}-logo)
  echo "# ${OS_NAME} bootstrap

# maximum Xorg resolution
export OS_MAX_RESOLUTION=${OS_MAX_RESOLUTION}

# logo
OS_LOGO=\"${OS_LOGO}"\" >>~/.bashrc
  echo '

# Wayland backend
export GDK_BACKEND=wayland
export CLUTTER_BACKEND=wayland
export QT_QPA_PLATFORM=wayland
export SDL_VIDEODRIVER=wayland
export GTK_THEME="Adwaita:dark"

# LD and XDG
export LD_LIBRARY_PATH="/usr/lib"
if [ "$XDG_RUNTIME_DIR" = "" ]; then
  export XDG_RUNTIME_DIR=/tmp
fi
if [ "$XDG_CONFIG_HOME" = "" ]; then
  export XDG_CONFIG_HOME="${HOME}/.config"
fi

# recognize SSH session from normal one
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
  SESSION_TYPE=remote/ssh
else
  case $(ps -o comm= -p $PPID) in
    sshd|*/sshd) SESSION_TYPE=remote/ssh;;
  esac
fi

# print welcome or eventually launch weston
if [ "$SESSION_TYPE" = "remote/ssh" ]; then
  echo -e "${OS_LOGO}
  ${SESSION_TYPE} session
 "
else
  if [ "$WESTON_LAUNCHED" != "true" ]; then
    export WESTON_LAUNCHED=true
    # weston only if there is an app to run
    if [ -f ~/app/package.json ]; then
      # first time configuration
      if [ ! -d ~/app/node_modules ]; then
        mkdir ~/app/node_modules
        cd ~/app
        npm install --production
        cd -
      fi
      weston-launch > /dev/null 2>&1
    else
      # if package.json has been renamed to package.jsno/jsoff
      # it was an explicit reboot-to-shell operation
      # make it load normally next reboot
      if [ -f ~/app/package.jsno ]; then
        mv ~/app/package.jsno ~/app/package.json
      else
        if [ -f ~/app/package.jsoff ]; then
          mv ~/app/package.jsoff ~/app/package.json
        fi
      fi
      # welcome the user
      echo -e "${OS_LOGO}"
      echo ''
    fi
  fi
fi
' >>~/.bashrc
  curl -Ls -o ${OS_APP_LAUNCHER} "${OS_REMOTE_FILES}/sh/launcher"
  chmod a+x ${OS_APP_LAUNCHER}
  mkdir -p ~/app
  cd ~/app
  if [ "$OS_BOOTINTO" = "electron" ]; then
    curl -LOs "${OS_REMOTE_FILES}/app/index.js"
    curl -LOs "${OS_REMOTE_FILES}/app/index.html"
    curl -LOs "${OS_REMOTE_FILES}/app/package.json"
  else
    curl -LOs "${OS_REMOTE_FILES}/jsgtk/index.js"
    curl -LOs "${OS_REMOTE_FILES}/jsgtk/package.json"
    curl -LOs "${OS_REMOTE_FILES}/jsgtk/browse"
    chmod a+x browse
  fi
  curl -LOs "${OS_REMOTE_FILES}/app/logo-dark.svg"
  curl -LOs "${OS_REMOTE_FILES}/app/logo-light.svg"
  mkdir -p node_modules
fi
