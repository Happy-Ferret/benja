#!/usr/bin/env bash
set -e

##
# Copyright (c) 2016 Andrea Giammarchi
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##

export OS_FULL_LOGO=" 
  [*]$(uname -m)[/]${OS_LOGO}  ${OS_VERSION}
"

localectl set-locale LANG=$LANG
export LC_TIME=$LANG

# disk checks
if [ "$DISK" = "" ]; then
  if [ "$1" = "" ]; then
    icho '  [*][r][WARNING][/] no DISK has been specified'
    echo ''
    echo '  please specify a DISK target:'
    echo '    ./install /dev/mmcblk0'
    echo '    DISK=/dev/mmcblk0 ./install'
    echo '  (use lsblk or fdisk -l to know which one could be OK)'
    exit 1
  else
    DISK="$1"
  fi
fi

# video card checks
if [ "$(lspci -v -s `lspci | awk '/VGA/{print $1}'` | grep Intel)" != "" ]; then
  GPU='Intel'
  GPU_DRIVERS='xf86-video-intel libva-intel-driver'
elif [ "$(lspci -v -s `lspci | awk '/VGA/{print $1}'` | grep NVIDIA)" != "" ]; then
  GPU='nVidia'
  GPU_DRIVERS='xf86-video-nouveau mesa-libgl'
elif [ "$(lspci -v -s `lspci | awk '/VGA/{print $1}'` | grep AMD)" != "" ]; then
  GPU='Radeon'
  GPU_DRIVERS='xf86-video-ati libva-mesa-driver'
fi

# swap checks
if [ "$SWAP" = "" ]; then
  SWAP=0
fi

# EDD needed in some board
if [ "$EDD" = "NO" ] || [ "$EDD" = "0" ] || [ "$EDD" = "false" ]; then
  EDD=off
fi

PASSWD="$(cat /dev/urandom | head | tail | sha256sum | sed -e 's/  -//')"
USER='benja'
UPASSWD="$USER"
LABEL="$USER"

# UEFI architecture check
if [ "$UEFI" != "" ]; then
  if [ "$UEFI" != "NO" ]; then
    if [ "$UEFI" != "efi64" ]; then
      if [ "$UEFI" != "efi32" ]; then
        echo "valid UEFI are efi64 or efi32, not $UEFI"
        exit 1
      fi
    fi
  fi
else
  if [ "$CURRENT_ARCH" = "x86_64" ]; then
    UEFI=efi64
  else
    UEFI=efi32
  fi
fi

if [ "$UEFI" = "NO" ]; then
  SYSLINUX_BOOT='/boot'
  SYSLINUX_ROOT='/boot'
else
  SYSLINUX_BOOT=''
  SYSLINUX_ROOT='/boot'
  clean_efibootmgr "$LABEL"
  efibootmgr
fi

pacman -Sy --noconfirm
pacman-db-upgrade
pacman-key --init
pacman-key --populate archlinux
pacman -S --needed --noconfirm fbset

echo "verifying $DISK"
POSSIBLEDISKS=($(get_drives $DISK))

if [[ $? -ne 0 ]] ; then
  echo " ${DISK} is not valid"
  exit 1
fi

for CHOICE in $POSSIBLEDISKS; do
  if [ "$(df | grep $CHOICE)" != "" ]; then
    echo "unmounting $CHOICE"
    umount $CHOICE
    if [[ $? -ne 0 ]] ; then
      icho "  [*][r][WARNING][/] unable to install in ${CHOICE}"
      exit 1
    fi
  fi
done

dd if=/dev/zero of=$DISK bs=1 count=2048

sync
sleep 2

if [ "$UEFI" = "NO" ]; then
  PARTED_START_AT="2048s"
  parted --script $DISK mklabel msdos
else
  PARTED_START_AT="100M"
  parted --script $DISK mklabel gpt
  parted --script --align optimal $DISK mkpart primary fat16 2048s $PARTED_START_AT
  parted $DISK set 1 boot on
fi

if [ "$SWAP" = "0" ]; then
  parted --script --align optimal $DISK mkpart primary ext4 $PARTED_START_AT 100%
else
  parted --script --align optimal $DISK mkpart primary linux-swap $PARTED_START_AT $SWAP
  parted --script --align optimal $DISK mkpart primary ext4 $SWAP 100%
fi

sync
sleep 1

POSSIBLEDISKS=($(get_drives $DISK))

if [[ $? -ne 0 ]] ; then
  icho "  [*][r][WARNING][/] unable to install in ${POSSIBLEDISKS[*]}"
  exit 1
fi

EFI=
ROOT=

if [ "$UEFI" = "NO" ]; then
  if [ "$SWAP" != "0" ]; then
    SWAP="${POSSIBLEDISKS[0]}"
    ROOT="${POSSIBLEDISKS[1]}"
  else
    ROOT="${POSSIBLEDISKS[0]}"
  fi
else
  EFI="${POSSIBLEDISKS[0]}"
  if [ "$SWAP" != "0" ]; then
    SWAP="${POSSIBLEDISKS[1]}"
    ROOT="${POSSIBLEDISKS[2]}"
  else
    ROOT="${POSSIBLEDISKS[1]}"
  fi
fi

if [ "$SWAP" != "0" ]; then
  mkswap $SWAP
  swapon $SWAP
fi

sync

if [ "$UEFI" != "NO" ]; then
  mkfs.vfat $EFI
fi
yes | mkfs.ext4 $ROOT
sync
sleep 3

if [ "$UEFI" != "NO" ]; then
  EFI_UUID="$(get_uuid $EFI)"
  echo "EFI:             ${EFI}"
fi
ROOT_UUID="$(get_uuid $ROOT)"
echo "ROOT:            ${ROOT}"
if [ "$SWAP" != "0" ]; then
  echo "SWAP:            $SWAP"
fi
echo "GPU:             ${GPU}"
echo ''

sleep 3

if [ "$ROOT_UUID" = "" ]; then
  icho "  [*][r][WARNING][/] unable to retrieve UUID for ${ROOT}"
  exit 1
fi

mkdir -p benja

# temporary hack to test boot from SD
# and system in the EMMC
# needed to be done upfront:
#   1. create a primary ext4 partition in /dev/emmcblk0
#   2. mkfs.ext4 /dev/emmcblk0p1
#   3. specify such partition before running this installer
mount -a
if [ "$EXP_USE_EMMC" != "" ]; then
  mount $EXP_USE_EMMC benja
  mkdir -p "benja$SYSLINUX_ROOT"
  mount $ROOT "benja$SYSLINUX_ROOT"
  SYSLINUX_BOOT=''
else
  mount $ROOT benja
  if [ "$UEFI" != "NO" ]; then
    mkdir -p "benja$SYSLINUX_ROOT"
    mount $EFI "benja$SYSLINUX_ROOT"
  fi
fi
sync

TOPACKSTRAP="base sudo syslinux gptfdisk arch-install-scripts intel-ucode"
if [ "$UEFI" != "NO" ]; then
  TOPACKSTRAP="$TOPACKSTRAP efibootmgr efitools"
fi

TOPACKSTRAP="$TOPACKSTRAP dialog wpa_supplicant iw"

pacstrap benja $TOPACKSTRAP
sync

icho "${OS_FULL_LOGO}">"benja/${OS_NAME}-logo"

# rw quiet splash loglevel=0 console=tty2
APPEND="APPEND root=UUID=$ROOT_UUID rw"
if [ "$EDD" != "" ]; then
  APPEND="$APPEND edd=$EDD"
fi

echo "#!/usr/bin/env bash

DISK='$DISK'
USER='$USER'
EFI='$EFI'
ROOT='$ROOT'
LABEL='$LABEL'
LOCALE='$LOCALE'

echo '
en_US.UTF-8 UTF-8
en_GB.UTF-8 UTF-8
' >> /etc/locale.gen

if [ '$LOCALE' != '' ]; then
  echo '$LOCALE.UTF-8 UTF-8' >> /etc/locale.gen
fi

if [ '$LOCALE' != '' ]; then
  echo '
LANG=$LOCALE.UTF-8
LC_TIME=$LOCALE.UTF-8
'>>/etc/locale.conf
else
  echo '
LANG=$LANG
LC_TIME=$LANG
'>>/etc/locale.conf
fi

hwclock --systohc --utc

localectl set-locale LANG=\$LANG
locale-gen
locale > /etc/locale.conf

if [ '$(uname -m)' = 'x86_64' ]; then
  echo '
[multilib]
Include = /etc/pacman.d/mirrorlist' >> /etc/pacman.conf
  sync
fi

pacman -Syu --noconfirm
pacman-db-upgrade
systemctl enable dhcpcd
systemctl enable ntpd.service
systemctl enable sshd

echo '###############
##   root    ##
###############'
echo -e '$PASSWD
$PASSWD' | passwd

useradd -m -g users -G wheel,storage,power,video,lp -s /bin/bash $USER
echo '##################
## $USER ##
##################'
echo -e '$UPASSWD
$UPASSWD' | passwd $USER

echo '%wheel ALL=(ALL) ALL' >> /etc/sudoers
echo '
# password once asked never expires
Defaults env_reset, timestamp_timeout=-1
' >> /etc/sudoers

mkdir -p /etc/systemd/system/getty@tty1.service.d
echo '[Service]
ExecStart=
ExecStart=-/usr/sbin/agetty -n -i -a $USER %I'>/etc/systemd/system/getty@tty1.service.d/autologin.conf

sync

free -h

syslinux-install_update -ia

if [ '$UEFI' != 'NO' ]; then
  mkdir -p $SYSLINUX_ROOT/syslinux
  if [ '$CURRENT_ARCH' = 'x86_64' ]; then
    cp -r /usr/lib/syslinux/efi64/* $SYSLINUX_ROOT/syslinux
  else
    cp -r /usr/lib/syslinux/efi32/* $SYSLINUX_ROOT/syslinux
  fi
  cp -r /usr/lib/syslinux/$UEFI/syslinux.efi $SYSLINUX_ROOT/syslinux
  echo \"[Unit]
Description=$SYSLINUX_ROOT EFI partition automatically mounted

[Service]
User=root
Type=simple
ExecStart=/usr/bin/mount --uuid $EFI_UUID $SYSLINUX_ROOT

[Install]
WantedBy=multi-user.target\">/etc/systemd/system/automount-efi.service
  systemctl enable automount-efi
fi

pacman -Syu --needed --noconfirm \
  weston $GPU_DRIVERS xorg-server-xwayland \
  ntp gjs \
  gstreamer-vaapi gst-libav \
  alsa-utils xdg-utils \
  hunspell-en \
  file-roller \
  bluez bluez-utils \
  ttf-liberation ttf-symbola ttf-droid ttf-freefont

echo 'TIMEOUT 0
PROMPT 0
DEFAULT arch

LABEL arch
      LINUX $SYSLINUX_BOOT/vmlinuz-linux
      INITRD $SYSLINUX_BOOT/intel-ucode.img,$SYSLINUX_BOOT/initramfs-linux.img
      $APPEND

'> $SYSLINUX_ROOT/syslinux/syslinux.cfg

pacman-db-upgrade
sync

if [ '$UEFI' != 'NO' ]; then
  if [ -d /usr/share/efitools/efi/ ]; then
    cp /usr/share/efitools/efi/{PreLoader,HashTool}.efi /boot/syslinux/
    cp /boot/syslinux/syslinux.efi /boot/syslinux/loader.efi
    efibootmgr -c -d $DISK -l /syslinux/PreLoader.efi -L '$LABEL'
  else
    if [ -d /usr/lib/prebootloader ]; then
      cp /usr/lib/prebootloader/{PreLoader,HashTool}.efi /boot/syslinux/
      cp /boot/syslinux/syslinux.efi /boot/syslinux/loader.efi
      efibootmgr -c -d $DISK -l /syslinux/PreLoader.efi -L '$LABEL'
    else
      efibootmgr -c -d $DISK -l /syslinux/syslinux.efi -L '$LABEL'
    fi
  fi
  sync
fi

sleep 3

mkinitcpio -p linux

sync

if [ '$UEFI' = 'NO' ]; then
  if [ '$SAVE_FSTAB_INFO' = '1' ]; then
    fdisk -l > /info/fdisk-chroot
    genfstab -U -p / > /info/genfstab-chroot
  fi
fi


pacman -S --needed --noconfirm \
  sudo curl iptables fbset sed grep cpupower dialog wpa_supplicant openssh libnotify

# test in case somebody would like to use native themes
pacman -S --needed --noconfirm gnome-themes-standard

# fonts
sync && sleep 1 && pacman -S --needed --noconfirm \
  ttf-dejavu ttf-liberation ttf-symbola ttf-droid

# gstreamer
sync && sleep 1 && pacman -S --needed --noconfirm \
  gst-plugins-base gst-plugins-good gst-libav

# npm
sync && sleep 1 && pacman -S --needed --noconfirm npm

# extras
sync && sleep 1 && pacman -S --needed --noconfirm \
  libva-vdpau-driver libva-mesa-driver \
  gconf nss pulseaudio pulseaudio-alsa gperf libexif

# electron
pacman -S --needed --noconfirm xorg-server-xwayland gtk2
npm install -g tiny-cdn
npm install -g electron-prebuilt

echo ' creating 80 to 8080 redirect'
echo '[Unit]
Description=${OS_NAME} 80 to 8080 service

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/bin/iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080
ExecStart=/usr/bin/iptables -t nat -I OUTPUT -p tcp -o lo --dport 80 -j REDIRECT --to-port 8080

[Install]
WantedBy=multi-user.target
' >/etc/systemd/system/${OS_NAME}-80to8080.service
systemctl enable ${OS_NAME}-80to8080.service

echo ' configuring hostname'
echo '${OS_USER}.local' > /etc/hostname
hostnamectl set-hostname '${OS_USER}.local'
sync
sed -i \"s/localhost\\\$/localhost\$(printf '\\t')${OS_USER}.local/g\" /etc/hosts

# trying to avoid suspend mode
echo 'HandleSuspendKey=ignore
HandleLidSwitch=ignore' >>/etc/systemd/logind.conf

# making first wifi-setup straight forward
curl -LOs "${OS_REMOTE_FILES}/sh/wifi-setup"
chmod a+x wifi-setup
mv wifi-setup /usr/bin

echo ' configuring user'
cd $OS_USER_DIR
curl -LOs "${OS_REMOTE_FILES}/sh/install-user"
chown "${OS_USER}:users" /${OS_NAME}-logo
mv /${OS_NAME}-logo $OS_USER_DIR
sudo -H -u $OS_USER bash -c \"OS_MAX_RESOLUTION='${OS_MAX_RESOLUTION}' OS_APP_LAUNCHER='${OS_APP_LAUNCHER}' OS_BOOTINTO='${OS_BOOTINTO}' OS_REMOTE_FILES='${OS_REMOTE_FILES}' OS_NAME='${OS_NAME}' OS_USER='${OS_USER}' sh ./install-user\"
sync
sleep 1
rm install-user
rm -f $OS_USER_DIR/${OS_NAME}-logo
cd -

exit
">>benja.bash

mv benja.bash benja/benja
chmod a+x benja/benja

arch-chroot benja /benja

sync
sleep 2

if [ "$EXP_USE_EMMC" != "" ]; then
  umount "benja$SYSLINUX_ROOT"
else
  if [ "$UEFI" != "NO" ]; then
    umount "benja$SYSLINUX_ROOT"
  fi
fi
umount benja
