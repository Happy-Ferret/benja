#!/usr/bin/env bash

##
# Copyright (c) 2016 Andrea Giammarchi
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##

if [ "$(uname)" = "Darwin" ]; then
  echo "
  $(tput bold)WARNING$(tput sgr0) OSX/Darwin is not supported.
  "
  exit 1
fi

export OS_PLATFORM_UTILS=
export OS_PLATFORM=
export DISK=

for tmp in $@; do
  if [ "${tmp:0:1}" = "/" ]; then
    if [ "$(lsblk $tmp)" != "" ]; then
      DISK="$tmp"
    else
      echo "
  $(tput bold)WARNING$(tput sgr0) invalid target $(tput bold)${tmp}$(tput sgr0)
      "
      exit 1
    fi
  else
    case $tmp in
    beaglebone-black)
      OS_PLATFORM="BeagleBone Black"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    cubieboard)
      OS_PLATFORM="Cubieboard"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    cubieboard-1)
      OS_PLATFORM="Cubieboard"
      OS_PLATFORM_UTILS="cubieboard"
      ;;
    cubieboard-2)
      OS_PLATFORM="Cubieboard 2"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    rpi)
      # TODO: test this actually works
      OS_PLATFORM="Raspberry Pi 1"
      OS_PLATFORM_UTILS="rpi1"
      ;;
    rpi1)
      # TODO: test this actually works
      OS_PLATFORM="Raspberry Pi 1"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    rpi2)
      OS_PLATFORM="Raspberry Pi 2"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    rpi3)
      OS_PLATFORM="Raspberry Pi 3"
      OS_PLATFORM_UTILS="rpi2"
      ;;
    odroid-c1)
      OS_PLATFORM="ODROID-C1"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    odroid-c2)
      OS_PLATFORM="ODROID-C2"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    odroid-u2)
      OS_PLATFORM="ODROID-U2"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    odroid-u3)
      OS_PLATFORM="ODROID-U3"
      OS_PLATFORM_UTILS="odroid-u2"
      ;;
    odroid-xu)
      OS_PLATFORM="ODROID-XU"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    cubox-i)
      OS_PLATFORM="CuBox-i"
      OS_PLATFORM_UTILS="${tmp}"
      ;;
    esac
  fi
done

# there are few cases

#   1. NOTHING AVAILABLE: show help message with options
#   2. DISK ONLY: install x86_64
#   3. DISK AND PLATFORM: prepare via install-arm

if [ "${DISK}" = "" ] && [ "${OS_PLATFORM}" = "" ]; then
  echo "
 $(tput bold)BENJA Installer$(tput sgr0)
 a disk target and optionally an ARM platform is needed:
  
   bash install /dev/mmcblk0
   bash install rpi2 /dev/mmcblk0
  
 following a list of possible targets:
  "
  first=0
  for tmp in $(lsblk --output NAME); do
    if [ "${tmp:0:1}" != "├" ] && [ "${tmp:0:1}" != "└" ] && [ "$tmp" != "NAME" ]; then
      if [ "${first}" = "0" ]; then
        echo "   /dev/${tmp}  (first is usually the current system)"
      else
        echo "   $(tput bold)/dev/${tmp}$(tput sgr0)"
      fi
    fi
  done
  echo "
 following a list of possible platforms:
  
   beaglebone-black cubox-i
   cubieboard cubieboard-1 cubieboard-2
   rpi rpi1 rpi2 rpi3
   odroid-c1 odroid-c2
   odroid-u2 odroid-u3 odroid-xu
 "
  exit 0
else
  export OS_INSTALLER_SRC="$(pwd)/benja-installer"

  mkdir -p "${OS_INSTALLER_SRC}"
  cd "${OS_INSTALLER_SRC}"

  if [ ! -f bash-info ]; then
    curl -LOs 'https://benja.io/os/sh/bash-info'
    sync
  fi
  . bash-info

  if [ ! -f utils ]; then
    curl -LOs "${OS_REMOTE_FILES}/sh/utils"
    sync
  fi
  . utils

  if [ "${OS_PLATFORM}" = "" ]; then
    if [ "${CURRENT_ARCH}" = "x86_64" ] || [ "${CURRENT_ARCH}" = "i686" ]; then
      # update system time
      # if not possible, will fail
      echo ''
      echo ' verifying internet connection ...'
      echo ''
      ntpdate pool.ntp.org

      clear

      icho "${OS_LOGO}

  Installing for [*]${CURRENT_ARCH}[/]
 
"
      if [ ! -f install-x86_64 ]; then
        curl -LOs "${OS_REMOTE_FILES}/sh/install-x86_64"
        sync
      fi

      timedatectl set-local-rtc 1

      . install-x86_64

      echo ''
      icho ' [*]Benja OS is ready[/]'
      echo ''
      echo ' Please remove other bootable disks.'
      echo ' to shut down via this prompt, please type:'
      echo '  shutdown -h now'
      echo ''
    fi
  else
    if [ ! -f install-arm ]; then
      curl -LOs "${OS_REMOTE_FILES}/sh/install-arm"
      sync
    fi

    export OS_PREPARE_SD=true

    . install-arm
 
  fi

  # cleanup
  rm -r "${OS_INSTALLER_SRC}"

fi
